package hard

import (
	"bytes"
	"fmt"
	"testing"
	"time"
)

func Test_solveSudoku(t *testing.T) {
	board := [][]byte{
		{'5','3','.', '.','7','.', '.','.','.'},
		{'6','.','.', '1','9','5', '.','.','.'},
		{'.','9','8', '.','.','.', '.','6','.'},
		{'8','.','.', '.','6','.', '.','.','3'},
		{'4','.','.', '8','.','3', '.','.','1'},
		{'7','.','.', '.','2','.', '.','.','6'},
		{'.','6','.', '.','.','.', '2','8','.'},
		{'.','.','.', '4','1','9', '.','.','5'},
		{'.','.','.', '.','8','.', '.','7','9'},
	}
	solveSudoku(board)
	for i:=0;i<9;i++{
		fmt.Println(fmt.Sprintf("%c", board[i]))
	}
}


func Test_solveSudoku_byte(t *testing.T) {
	//testNumsByte,_ := strconv.Atoi(string([]byte{'3'}))
	board := [][]byte{
		{'5','3','.', '.','7','.', '.','.','.'},
		{'6','.','.', '1','9','5', '.','.','.'},
		{'.','9','8', '.','.','.', '.','6','.'},
		{'8','.','.', '.','6','.', '.','.','3'},
		{'4','.','.', '8','.','3', '.','.','1'},
		{'7','.','.', '.','2','.', '.','.','6'},
		{'.','6','.', '.','.','.', '2','8','.'},
		{'.','.','.', '4','1','9', '.','.','5'},
		{'.','.','.', '.','8','.', '.','7','9'},
	}
	numByte := bytes.NewBufferString("3").Bytes()[0]

	if numByte == board[0][1] {
		fmt.Println(fmt.Sprintf("is equal"))
	}
	board[0][2] = numByte
	for i:=0;i<9;i++{
		fmt.Println(fmt.Sprintf("%c", board[i]))
	}
	time.Sleep(1 * time.Second)
}

func Test_solveSudoku1(t *testing.T) {
	board := [][]byte{
		{'.','.','2', '.','4','.', '.','.','.'},
		{'.','9','.', '6','5','.', '4','.','.'},
		{'4','6','5', '.','.','.', '1','7','.'},
		{'5','2','.', '8','3','.', '.','9','1'},
		{'.','7','.', '.','.','.', '.','3','6'},
		{'3','.','6', '.','.','.', '.','.','8'},
		{'.','.','7', '.','9','8', '.','1','.'},
		{'9','3','.', '4','.','.', '.','2','.'},
		{'2','.','8', '5','.','.', '.','6','.'},
	}
	solveSudoku(board)
	for i:=0;i<9;i++{
		fmt.Println(fmt.Sprintf("%c", board[i]))
	}
}

func Test_solveSudoku2(t *testing.T) {
	board := [][]byte{
		{'.','4','6', '9','.','3', '.','.','.'},
		{'.','.','3', '.','5','.', '.','6','.'},
		{'9','.','.', '.','.','2', '.','.','3'},
		{'.','.','5', '.','.','6', '.','.','.'},
		{'8','.','.', '.','.','.', '.','1','.'},
		{'.','1','.', '7','8','.', '2','.','.'},
		{'.','.','.', '.','.','.', '.','5','.'},
		{'.','8','1', '3','.','.', '.','.','7'},
		{'.','.','.', '8','.','.', '1','.','4'},
	}
	solveSudoku(board)
	for i:=0;i<9;i++{
		fmt.Println(fmt.Sprintf("%c", board[i]))
	}
}